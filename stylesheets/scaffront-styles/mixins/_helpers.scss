//*********************************************
//    Common
//*********************************************

@mixin e($names...) {
  @if length($names) {
    @for $i from 1 through length($names) {
      @at-root &__#{nth($names, $i)} {
        @content;
      }
    }
  }
}
@mixin m($names...) {
  @if length($names) {
    @for $i from 1 through length($names) {
      @at-root &--#{nth($names, $i)} {
        @content;
      }
    }
  }
}

@function trim ($string) {
  $result: $string;
  @if (type-of($string) == list) {
    $result: ();
    $separator: list-separator($string);
    @each $item in $string {
      $result: append($result, trim($item), $separator);
    }
  } @elseif (type-of($string) == string) {
    @while(str-index($string, ' ') == 1) {
      $string: str-slice($string, 2);
    }

    @while(str-slice($string, str-length($string)) == ' ') {
      $string: str-slice($string, 1, str-length($string) - 1);
    }

    $result: $string;
  }

  @return $result;
}

@function implode($glue, $list) {
  $index: 0;
  $result: '';
  $glue: unquote($glue);
  @each $item in $list {
    $item: unquote('#{unquote($item)}');
    @if ($index != 0) {
      $result: unquote('#{$result}#{$glue}');
    }
    $result: unquote('#{$result}#{$item}');
    $index: $index + 1;
  }

  @return $result;
}

@function explode($glue, $string, $separator: comma) {
  @if (type-of($string) != string) {
    $string: inspect($string);
    @warn('[explode] Not a string! $string: "#{$string}"');
  }
  $string: unquote($string);

  @if (type-of($glue) != string) {
    $glue: inspect($glue);
    @warn('[explode] Not a string! $glue: "#{$glue}"');
  }
  $glue: unquote($glue);

  $separator: unquote($separator);
  @if ($separator == ',') {
    $separator: comma;
  } @elseif ($separator == ' ') {
    $separator: space;
  } @elseif ($separator != auto and $separator != comma and $separator != space) {
    $separator: auto;
    @warn('[to-list] Unknown separator! $separator: "#{$separator}"');
  }

  $result: ();
  $index: str-index($string, $glue);
  @while ($index != null) {
    $item: str-slice($string, 1, $index - 1);
    @if ($item != '') {
      $result: append($result, $item, $separator);
    }
    $string: str-slice($string, $index + 1);
    $index: str-index($string, $glue);
    @if ($index == null and $string != '') {
      $result: append($result, $string, $separator);
    }
  }

  @return $result;
}


@function to-list($string, $separator: ' ') {
  $list: explode($separator, $string, $separator: $separator);

  @return $list;
}


@function selector-without-placeholders ($selector) {
  $list: to-list($selector, ',');
  $result: ();

  @each $selector in $list {
    $selector: trim($selector);
    @if (str-slice($selector, 1, 1) != '%') {
      $result: append($result, $selector, comma);
    }
  }

  $result: implode(', ', $result);
  @return $result;
}

@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}


@function join-pathes ($pathes...) {
  $result: implode('/', $pathes);
  $result: str_replace($result, '//', '/');
  $result: str_replace($result, '//', '/');

  @return $result;
}


@mixin no-border ($important: false) {
  $imp: '';
  @if ($important == true or $important == 1) {
    $imp: '!important';
  }

  $imp: unquote($imp);

  border: none $imp;
  outline: none $imp;
  text-decoration: none $imp;
}


@function is-true ($input) {
  $result: false;
  @if ($input == true or $input == 1) {
    $result: true;
  }

  @return $result;
}


@function map-append ($map, $append) {
  @if ((type-of($map) == list and length($map) == 0) or type-of($map) == map) {

  } @else {
    $map: ();
    @warn('[map-append] $map is not a valid map type! $map: #{inspect($map)}');
  }

  @if (type-of($append) != map) {
    $append: ();
    @warn('[map-append] $append is not a valid map type!');
  }

  @return map-merge($map, $append);
}


//@include setComponent(table-cell) {
//  padding:4px;
//  margin:4px;
//}
//
//td {
//  @include getComponent(table-cell);
//}
//
//th {
//  @include getComponent(table-cell);
//}

@mixin setComponent($placeholder) {
  %#{$placeholder} {
    @content;
  }
}

@mixin getComponent($placeholder) {
  @extend %#{$placeholder};
}
