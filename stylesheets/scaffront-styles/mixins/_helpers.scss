//*********************************************
//    Common
//*********************************************

@import 'SassyLists';
@import 'sassy-maps';
@import 'sassdash';
@import 'sassy-validation';

@function sf-default ($val, $default: null) {
  @if (is-null($val)) {
    @return $default;
  }

  @return $val;
}

@function sf-trim ($string) {
  $result: $string;
  @if (type-of($string) == list) {
    $result: ();
    $separator: list-separator($string);
    @each $item in $string {
      $result: append($result, sf-trim($item), $separator);
    }
  } @elseif (type-of($string) == string) {
    @while (str-index($string, ' ') == 1) {
      $string: str-slice($string, 2);
    }

    @while (str-slice($string, str-length($string)) == ' ') {
      $string: str-slice($string, 1, str-length($string) - 1);
    }

    $result: $string;
  }

  @return $result;
}

@function sf-implode ($glue, $list) {
  $index: 0;
  $result: '';
  $glue: unquote($glue);
  @each $item in $list {
    $item: unquote('#{unquote($item)}');
    @if ($index != 0) {
      $result: unquote('#{$result}#{$glue}');
    }
    $result: unquote('#{$result}#{$item}');
    $index: $index + 1;
  }

  @return $result;
}

@function sf-explode ($glue, $string, $separator: comma) {
  @if (type-of($string) != string) {
    $string: inspect($string);
    @warn('[sf-explode] Not a string! $string: "#{$string}"');
  }
  $string: unquote($string);

  @if (type-of($glue) != string) {
    $glue: inspect($glue);
    @warn('[sf-explode] Not a string! $glue: "#{$glue}"');
  }
  $glue: unquote($glue);

  $separator: unquote($separator);
  @if ($separator == ',') {
    $separator: comma;
  } @elseif ($separator == ' ') {
    $separator: space;
  } @elseif ($separator != auto and $separator != comma and $separator != space) {
    $separator: auto;
    @warn('[sf-explode] Unknown separator! $separator: "#{$separator}"');
  }

  $result: ();
  $index: str-index($string, $glue);
  @while ($index != null) {
    $item: str-slice($string, 1, $index - 1);
    @if ($item != '') {
      $result: append($result, $item, $separator);
    }
    $string: str-slice($string, $index + 1);
    $index: str-index($string, $glue);
    @if ($index == null and $string != '') {
      $result: append($result, $string, $separator);
    }
  }

  @return $result;
}

@function sf-selector-without-placeholders ($selector) {
  $list: sl-to-list($selector, ',');
  $result: ();

  @each $selector in $list {
    $selector: sf-trim($selector);
    @if (str-slice($selector, 1, 1) != '%') {
      $result: append($result, $selector, comma);
    }
  }

  $result: sf-implode(', ', $result);
  @return $result;
}

@function sf-str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + sf-str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}

@function sf-join-pathes ($pathes...) {
  $result: sf-implode('/', $pathes);
  $result: sf-str-replace($result, '//', '/');
  $result: sf-str-replace($result, '//', '/');

  @return $result;
}

@function sf-is-true ($input) {
  $result: false;
  @if ($input == true or $input == 1) {
    $result: true;
  }

  @return $result;
}

@function sf-important ($important: false) {
  $important: '';
  @if (sf-is-true($important)) {
    $imp: '!important';
  }

  @return unquote($important);
}

@function is-zero ($var) {
  @if ((is-number($var) or is-measure($var)) and strip-units($var) == 0) {
    @return true;
  }

  @return false;
}

@function is-arglist ($var) {
  @return type-of($var) == arglist;
}

@function is-trusty ($var) {
  @if ((is-map($var) or is-list($var) or is-arglist($var)) and not is-empty($var)) {
    @return true;
  } @elseif (is-string($var) and not is-empty($var)) {
    @return true;
  } @elseif (is-number($var) and is-positive($var)) {
    @return true;
  } @elseif (is-measure($var) and is-measure-positive($var)) {
    @return true;
  }

  @return false;
}

@function sf-assign ($properties, $values) {
  @if (not is-list($properties)) {
    $properties: ($properties,);
  }

  @if (is-list($values)) {
    $values: _flatten($values, true);
  } @elseif (not is-map($values)) {
    $values: ($values,);
  }

  $result: ();
  $propertiesLength: length($properties);
  $valuesLength: length($values);

  @if (is-map($values)) {
    @each $property in $properties {
      $value: map-get($values, $property);
      @if (not is-null($value)) {
        $result: map-set($result, $property, $value);
      }
    }
  } @else {
    @each $property in $properties {
      $propertyIndex: index($properties, $property);
      @if ($propertyIndex <= $valuesLength) {
        $result: map-set($result, $property, nth($values, $propertyIndex));
      }
    }
  }

  @return $result;
}

@function sf-assign-defaults ($properties: (), $values: (), $defaults: null) {
  $result: sf-assign($properties, $values);

  @if (is-map($defaults)) {
    $result: _defaults($result, $defaults);
  }

  @return $result;
}

@function sf-list-set-prefix ($list, $prefix: '') {
  @if (not is-list($list) or not is-string($prefix) or is-empty($prefix)) {
    @return $list;
  }

  $list: _flatten($list);

  $prefix: unquote($prefix);
  $index: 0;
  @each $value in $list {
    $index: $index + 1;
    @if (is-string($value)) {
      $value: if(str-index($value, $prefix) == 1, $value, str-insert($value, $prefix, 1));
      $list: set-nth($list, $index, $value);
    }
  }

  @return $list;
}

@function sf-map-set-key-prefix ($map, $prefix: '') {
  @if (not is-map($map) or not is-string($prefix) or is-empty($prefix)) {
    @return $map;
  }

  $result: ();
  $prefix: unquote($prefix);
  @each $key, $value in $map {
    $key: if(str-index($key, $prefix) == 1, $key, str-insert($key, $prefix, 1));
    $result: map-set($result, $key, $value);
  }

  @return $result;
}

@function sf-prefix-set ($var, $prefix: '') {
  @if (is-map($var)) {
    @return sf-map-set-key-prefix($var, $prefix);
  } @else {
    $var: if(not is-list($var), ($var,), $var);
    @return sf-list-set-prefix($var, $prefix);
  }

  @return $var;
}

@function sf-merge-selectors ($list1: (), $list2: ()) {
  @if (type-of($list1) != list) {
    $list1: ($list1,);
  }
  @if (type-of($list2) != list) {
    $list2: ($list2,);
  }

  $result: ();
  @each $selector1 in $list1 {
    // $selector: unquote($selector1);
    @each $selector2 in $list2 {
      $result: append($result, #{unquote($selector1)}#{unquote($selector2)}, comma);
    }
  }

  @return $result;
}
