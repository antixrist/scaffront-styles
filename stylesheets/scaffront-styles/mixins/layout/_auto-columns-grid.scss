//*********************************************
//    Framework/Mixins/Layout/Auto-columns Grid
//*********************************************

@import "sassy-validation";

@mixin sf-auto-columns-aside ($position, $gutter: 0, $gutter-style: 'margin') {
  $direction: unquote($position);
  $gutter-style: unquote($gutter-style);

  float: $direction;
  #{$gutter-style}-#{opposite-position($direction)}: $gutter;
}

@mixin sf-auto-columns-content () {
  overflow: hidden;
  display: block;
}

@mixin sf-auto-columns (
  $selector-content,
  $selector-aside-left,
  $selector-aside-right,
  $gutter: 0,
  $gutter-style: 'margin'
) {
  @include sf-clearfix;

  $selector-content: unquote($selector-content);
  $selector-aside-left: unquote($selector-aside-left);
  $selector-aside-right: unquote($selector-aside-right);

  @if ($selector-content) {
    & > #{$selector-content} {
      @include sf-auto-columns-content();
    }
  }

  @if ($selector-aside-left) {
    & > #{$selector-aside-left} {
      @include sf-auto-columns-aside($position: left, $gutter: $gutter, $gutter-style: $gutter-style);
    }
  }
  @if ($selector-aside-right) {
    & > #{$selector-aside-right} {
      @include sf-auto-columns-aside($position: right, $gutter: $gutter, $gutter-style: $gutter-style);
    }
  }
}

@mixin sf-auto-columns-aside ($position, $gutter: 0, $gutter-style: 'margin') {
  $direction: unquote($position);
  $gutter-style: unquote($gutter-style);

  float: $direction;
  #{$gutter-style}-#{opposite-position($direction)}: $gutter;
}

@mixin sf-auto-columns-content () {
  overflow: hidden;
  display: block;
}

@mixin sf-auto-columns (
  $selector-content,
  $selector-aside-left,
  $selector-aside-right,
  $gutter: 0,
  $gutter-style: 'margin'
) {
  @include sf-clearfix;

  $selector-content: unquote($selector-content);
  $selector-aside-left: unquote($selector-aside-left);
  $selector-aside-right: unquote($selector-aside-right);

  @if ($selector-content) {
    & > #{$selector-content} {
      @include sf-auto-columns-content();
    }
  }

  @if ($selector-aside-left) {
    & > #{$selector-aside-left} {
      @include sf-auto-columns-aside($position: left, $gutter: $gutter, $gutter-style: $gutter-style);
    }
  }
  @if ($selector-aside-right) {
    & > #{$selector-aside-right} {
      @include sf-auto-columns-aside($position: right, $gutter: $gutter, $gutter-style: $gutter-style);
    }
  }
}

/**
 * http://jsfiddle.net/alexriz/d5SUg/
 */
@mixin _sf-columns-auto-fix () {
  -height: 1%; /*IE6*/
  *zoom: 1; /*IE6-7*/
  display: table;

  &:after {
    /*content: '1 1';*/
    /*Op15+*/
    content: '1 1 1 1 1 1 1 1 1 1 1'; /*Op12+*/
    font: .1px/0 a;
    display: block;
    word-spacing: 99in;
    overflow: hidden; /*IE8-*/
  }
}

@mixin sf-asides (
  $selector-aside-left: '.asides__left',
  $selector-aside-right: '.asides__right',
  $selector-aside-center: '.asides__center',
  $gutter: 0
) {
  $aside-left: unquote($selector-aside-left);
  $aside-right: unquote($selector-aside-right);
  $aside-center: unquote($selector-aside-center);

  $aside-center: if($aside-center and not is-empty($aside-center),  $aside-center,  null);
  $aside-left:   if($aside-left   and not is-empty($aside-left),    $aside-left,    null);
  $aside-right:  if($aside-right  and not is-empty($aside-right),   $aside-right,   null);

  & {
    @include _sf-columns-auto-fix;
  }

  @if (not is-null($aside-center)) {
    #{$aside-center} {
      @include _sf-columns-auto-fix;
    }
  }

  @if (not is-null($aside-left) or not is-null($aside-right)) {
    $gutter: if(is-measure($gutter), $gutter, 0);
    $gutter: sf-assign-defaults(left right, $gutter, (left: $gutter, right: $gutter));

    @if (not is-null($aside-left)) {
      #{$aside-left} {
        float: left;
        margin-right: map-get($gutter, right);
      }
    }

    @if (not is-null($aside-right)) {
      #{$aside-right} {
        float: right;
        margin-left: map-get($gutter, left);
      }
    }
  }
}
