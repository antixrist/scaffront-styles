//*********************************************
//    Framework/Mixins/Content/Fonts
//*********************************************

@import 'SassyLists';

// глобальная переменная. в неё будут добавляться все шрифты и из неё же извлекаться

$sf-fonts: ();

@function sf-add-fonts ($fonts) {
  @if (type-of($fonts) != list and type-of($fonts) != map) {
    @return $sf-fonts;
  }

  $_fonts: $fonts;

  // нам нужен list шрифтов.
  // если пришёл обычный map, то надо завернуть его в список
  @if (type-of($_fonts) == map and map-has-key($_fonts, name) and map-has-key($_fonts, stack)) {
    $_fonts: ($_fonts,);
  }

  @each $font in $_fonts {
    @if (type-of($font) == map && map-has-key($font, name) and map-has-key($font, stack)) {

      @if (map-has-key($font, type) != true) {
        $font: map-merge($font, (type: regular));
      }
      @if (map-has-key($font, weight) != true) {
        $font: map-merge($font, (weight: 400));
      }
      @if (map-has-key($font, style) != true) {
        $font: map-merge($font, (style: normal));
      }

      $stack: map-get($font, stack);
      $stack: sl-to-list($stack);
      $font: map-merge($font, (stack: $stack));

      $sf-fonts: append($sf-fonts, $font) !global;
    }
  }

  @return $sf-fonts;
}

@function sf-get-font ($name, $type: regular) {
  @each $font in $sf-fonts {
    @if (map-get($font, name) == $name and map-get($font, type) == $type) {
      @return $font;
    }
  }

  @return null;
}

@function sf-get-stack ($name, $type: regular, $to-string: true) {
  $font: sf-get-font($name, $type);
  $stack: ();

  @if ($font != null) {
    $stack: map-get($font, stack);

    @if (is-true($to-string)) {
      $stack: unquote('"#{sl-to-string($stack, '", "')}"');
    } @else {
      $stack: sl-to-list($stack);
    }
  }

  @return $stack;
}

@mixin sf-font ($name, $type: regular) {
  $font: sf-get-font($name, $type);

  @if ($font != null) {
    font-family: implode(', ', map-get($font, stack));
    font-weight: map-get($font, weight);
    font-style: map-get($font, style);
  }
}
