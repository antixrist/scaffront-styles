//*********************************************
//    Framework/Mixins/Content/Fonts
//*********************************************

// глобальная переменная. в неё будут добавляться все шрифты и из неё же извлекаться
$sf-fonts: (
  //(name: roboto, type: regular, font: "RobotoRegular", weight: 400, style: normal)
);

$sf-safe-fonts: (
  arial-black:      ('Arial Black', 'Helvetica CY', 'Nimbus Sans L', 'sans-serif'),
  arial:            ('Arial', 'Helvetica CY', 'Nimbus Sans L', 'sans-serif'),
  courier:          ('Courier New', 'Nimbus Mono L', 'Monospace'),
  georgia:          ('Georgia', 'Century Schoolbook L', 'serif'),
  impact:           ('Impact', 'Charcoal CY', 'sans-serif'),
  times-new-roman:  ('Times New Roman', 'Times CY', 'Nimbus Roman No9 L', 'serif'),
  trebuchet:        ('Trebuchet MS', 'Helvetica CY', 'sans-serif'),
  verdana:          ('Verdana', 'Geneva CY', 'DejaVu Sans', 'sans-serif'),
  tahoma:           ('Tahoma', 'Geneva CY', 'sans-serif')
);

$sf-safe-font-types: (
  (type: regular,     weight: normal, style: normal),
  (type: bold,        weight: 700,    style: normal),
  (type: italic,      weight: normal, style: italic),
  (type: bold-italic, weight: 700,    style: italic)
);

@function sf-add-fonts ($fonts) {
  @if (type-of($fonts) != list and type-of($fonts) != map) {
    @return $sf-fonts;
  }

  $_fonts: $fonts;

  // нам нужен list шрифтов.
  // если пришёл обычный map, то надо завернуть его в список
  @if (type-of($_fonts) == map and map-has-key($_fonts, name) and map-has-key($_fonts, stack)) {
    $_fonts: ($_fonts,);
  }

  @each $font in $_fonts {
    @if (type-of($font) == map && map-has-key($font, name) and map-has-key($font, stack)) {

      @if (map-has-key($font, type) != true) {
        $font: map-merge($font, (type: regular));
      }
      @if (map-has-key($font, weight) != true) {
        $font: map-merge($font, (weight: 400));
      }
      @if (map-has-key($font, style) != true) {
        $font: map-merge($font, (style: normal));
      }

      $stack: map-get($font, stack);
      @if (type-of($stack)) {

      }

      $sf-fonts: append($sf-fonts, $font) !global;
    }
  }

  @return $sf-fonts;
}

@function sf-get-font-stack ($font, $fallback: null) {
  $result: ();

  @if (map-has-key($sf-safe-fonts, $font)) {
    $result: join($result, map-get($sf-safe-fonts, $font));
  } @else {
    $result: join($result, ($font));
  }

  @if ($fallback != null) {
    @if (map-has-key($sf-safe-fonts, $fallback)) {
      $result: join($result, map-get($sf-safe-fonts, $fallback));
    } @else {
      $result: join($result, ($fallback));
    }
  }

  @return unquote('"#{implode('", "', $result)}"');
}

@function sf-get-font ($name, $type: regular) {
  @each $font in $sf-fonts {
    @if (map-get($font, name) == $name and map-get($font, type) == $type) {
      @return $font;
    }
  }

  @return null;
}

@mixin sf-font ($name, $type: regular) {
  $font: sf-get-font($name, $type);

  @if ($font != null) {
    font-family: implode(', ', map-get($font, stack));
    font-weight: map-get($font, weight);
    font-style: map-get($font, style);
  }
}


// набьём стандартными безопасными стеками шрифтов глобальную переменную $sf-al-fonts
@each $name, $stack in $sf-safe-fonts {
  @each $font-type in $sf-safe-font-types {
    $font: (
      name:   $name,
      stack:  $stack,
      type:   map-get($font-type, 'type'),
      weight: map-get($font-type, 'weight'),
      style:  map-get($font-type, 'style')
    );
    $sf-fonts: sf-add-fonts($font);
  }
}
