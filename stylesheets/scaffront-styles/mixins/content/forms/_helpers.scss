//*********************************************
//    Content/Forms Helpers
//*********************************************

$base-font-size:    14px !default;
$base-line-height:  24px !default;

@import 'sass-units-transform';

$inputs-like-text-types: text email number password search tel url color date datetime datetime-local month time week !default;
$inputs-like-text: ();

@each $type in $inputs-like-text-types {
  $inputs-like-text:  append($inputs-like-text, unquote('input[type=#{$type}]'), comma);
}
$inputs-like-text:    append($inputs-like-text, textarea, comma);
$inputs-like-text:    append($inputs-like-text, select,   comma);

@mixin sf-control-background ($color, $direction: bottom, $fallback: true) {
  @if (type-of($color) == color) {
    background: $color;
  }
  @elseif (type-of($color) == list) {
    @if (type-of($fallback) != false) {
      @if (type-of($fallback) != color) {
        // calc fallback color
        $color-start: nth(nth($color, 1), 1);
        @if (type-of($color-start) == list) { $color-start: nth($color-start, 1); }

        $color-stop: nth(nth($color, length($color)), 1);
        @if (type-of($color-stop) == list) { $color-start: nth($color-stop, 1); }

        $fallback: mix($color-start, $color-stop, $weight: 50%);
      }

      background: $fallback;
    }

    @if (type-of($direction) != number and str-index(#{$direction}, unquote('to ')) != 1) {
      $direction: to $direction;
    }

    @include background-image(linear-gradient($direction, $color));
  }
}

@function sf-bounds ($data, $prefix: '') {
  $data: sf-assign-defaults(top right bottom left, $data, (top: null, right: null, bottom: null, left: null));
  $data: map-merge($data, (
    top:    if(is-null(map-get($data, top)),    0, map-get($data, top))
  ));
  $data: map-merge($data, (
    right:  if(is-null(map-get($data, right)),  map-get($data, top),   map-get($data, right))
  ));
  $data: map-merge($data, (
    bottom: if(is-null(map-get($data, bottom)), map-get($data, top),   map-get($data, bottom))
  ));
  $data: map-merge($data, (
    left:   if(is-null(map-get($data, left)),   map-get($data, right), map-get($data, left))
  ));

  @if (not is-empty($prefix)) {
    $data: sf-map-set-key-prefix($data, $prefix);
  }

  @return $data;
}

@function sf-bounds-list ($data) {
  $_bounds: sf-bounds($data);

  $bounds: ();
  @each $key, $value in $_bounds {
    $bounds: append($bounds, $value);
  }

  @return $bounds;
}

@function sf-bounds-map ($data, $prefix: '') {
  @return sf-bounds($data, $prefix);
}


@function sf-control-sizes(
  $height:        auto,
  $font-size:     $base-font-size,
  $line-height:   $base-line-height,
  $border-width:  1px,
  $padding:       0
) {
  $height:        if(is-measure($height)      and $height > 0,      $height,      null);
  $font-size:     if(is-measure($font-size)   and $font-size > 0,   $font-size,   0);
  $line-height:   if(is-measure($line-height) and $line-height > 0, $line-height, 0);

  $padding:       sf-bounds-map($padding);
  $border-width:  sf-bounds-map($border-width);

  @if (is-null($height)) {
    $height: ($font-size * clear-unit(to-unit($unit: em, $value: $line-height, $font-size: $font-size))) +
              to-unit($unit: px, $value: map-get($padding, top),          $font-size: $font-size) +
              to-unit($unit: px, $value: map-get($padding, bottom),       $font-size: $font-size) +
              to-unit($unit: px, $value: map-get($border-width, top),     $font-size: $font-size) +
              to-unit($unit: px, $value: map-get($border-width, bottom),  $font-size: $font-size)
  } @else {
    // todo (когда-нибудь) автоматом подгонять остальные параметры

    //$line-height: '';
    //
    //$height-line:     ($font-size * clear-unit(to-unit($unit: em, $value: $line-height, $font-size: $font-size)));
    //
    //$height-border:   to-unit($unit: px, $value: map-get($border-width, top),     $font-size: $font-size) +
    //                  to-unit($unit: px, $value: map-get($border-width, bottom),  $font-size: $font-size);
    //
    //$height-padding:  to-unit($unit: px, $value: map-get($padding, top),     $font-size: $font-size) +
    //                  to-unit($unit: px, $value: map-get($padding, bottom),  $font-size: $font-size);
    //
    //
    //
    //@if (($height-line + $height-border) < $height) {
    //  $padding-y: $height - ($height-line + $height-border);
    //} @else if ($height-line > $height) {
    //
    //}
  }

  $result: (
    height:       $height,
    font-size:    $font-size,
    line-height:  $line-height
  );

  $result: map-merge($result, sf-bounds-map($padding, 'padding-'));
  $result: map-merge($result, sf-assign(
    border-top-width border-right-width border-bottom-width border-left-width,
    sf-bounds-list($border-width)
  ));

  @return $result;
}


//@function sf-control-fit-to-height(
//  $height,
//  $font-size,
//  $line-height,
//  $border-width,
//  $padding-vertical,
//  $padding-horizontal,
//  $enlarge-by-ratio: false,
//  $reduce-by-ratio: false
//) {
//  $result: (
//    height: $height,
//    font-size: $font-size,
//    line-height: $line-height,
//    padding-vertical: $padding-vertical,
//    padding-horizontal: $padding-horizontal,
//    border-width: $border-width
//  );
//
//  $borders-height-px: dimensions-sum($unit: px, $dimensions: $border-width, $font-size: $font-size, $dir: vertical);
//  $paddings-height-px: dimensions-sum($unit: px, $dimensions: $padding-vertical, $font-size: $font-size, $dir: vertical);
//  $line-height-px: to-unit($unit: px, $value: $line-height, $font-size: $font-size);
//  $row-height-px: $line-height-px;
//  $inner-height-px: $row-height-px + $paddings-height-px;
//
//  $needed-height-px: to-unit($unit: px, $value: $height, $font-size: $font-size);
//  $needed-inner-height-px: $needed-height-px - $borders-height-px;
//
//  //$ratio: $needed-inner-height-px / $inner-height-px;
//
//  $new-padding-vertical: ($needed-inner-height-px - $row-height-px) /2;
//  @if ($new-padding-vertical < 0) {
//    $new-padding-vertical: 0;
//  }
//  $result: map-merge($result, (
//    padding-vertical: $new-padding-vertical,
//  ));
//
//
//  // если необходимая внутренняя высота больше исходной внутренней высоты
//  //@if ($needed-inner-height-px > $inner-height-px) {
//    // если нужно увеличивать параметры пропорционально
//    //@if ($enlarge-by-ratio == true or $enlarge-by-ratio == 1) {
//    //  // то пропорционально увеличим $font-size и padding'и
//    //  $result: map-merge($result, (
//    //    font-size: $font-size * $ratio,
//    //    padding-vertical: $padding-vertical * $ratio,
//    //    padding-horizontal: $padding-horizontal * $ratio
//    //  ));
//    //} @else {
//      // то просто подгоним вертикальные padding'и
//      //$new-padding-vertical: ($needed-inner-height-px - $row-height-px) /2;
//      //// и пропорционально вертикальным изменим горизонтальные
//      //$padding-ratio: $new-padding-vertical / $padding-vertical;
//      //$new-padding-horizontal: $padding-horizontal * $padding-ratio;
//      //$result: map-merge($result, (
//      //  padding-vertical: $new-padding-vertical,
//      //  padding-horizontal: $new-padding-horizontal
//      //));
//    //}
//  //} @else {
//  //  @if ($needed-inner-height-px < $inner-height-px) {
//      //@if ($reduce-by-ratio == true or $reduce-by-ratio == 1) {
//      //  // то пропорционально уменьшим $font-size и padding'и
//      //  $result: map-merge($result, (
//      //    font-size: $font-size * $ratio,
//      //    padding-vertical: $padding-vertical * $ratio,
//      //    padding-horizontal: $padding-horizontal * $ratio
//      //  ));
//      //} @else {
//      //  $result: map-merge($result, (padding-vertical: 0));
//      //}
//    //}
//  //}
//
//  @return $result;
//}
//
//@function sf-control-calc-auto-height(
//  $font-size,
//  $line-height,
//  $border-width,
//  $padding-vertical,
//  $padding-horizontal,
//  $lines: 1
//) {
//  @if (type-of($lines) != number or $lines <= 0) {
//    $lines: 1;
//  }
//
//  $line-height-px: to-unit($unit: px, $value: $line-height, $font-size: $font-size);
//  $rows-height-px: $line-height-px * $lines;
//
//  $borders-height-px: dimensions-sum($unit: px, $dimensions: $border-width, $font-size: $font-size, $dir: vertical);
//  $paddings-height-px: dimensions-sum($unit: px, $dimensions: $padding-vertical, $font-size: $font-size, $dir: vertical);
//
//  $height: $rows-height-px + $paddings-height-px + $borders-height-px;
//  //@debug($height);
//  //  $height: to-unit($unit, $value: $height, $font-size: $font-size);
//
//  @return (height: $height);
//}
//
//@function sf-control-get-sizes(
//  $font-size,
//  $line-height,
//  $border-width,
//  $padding-vertical,
//  $padding-horizontal,
//  $height: auto,
//  $lines: 1,
//  $enlarge-by-ratio: false,
//  $reduce-by-ratio: false
//) {
//  $result: (
//    height: $height,
//    font-size: $font-size,
//    line-height: $line-height,
//    border-width: $border-width,
//    padding-vertical: $padding-vertical,
//    padding-horizontal: $padding-horizontal
//  );
//
//  @if (type-of($height) == number and $height != 0) {
//    // нужно подогнать под высоту
//    $result: map-merge($result, sf-control-fit-to-height(
//      $height,
//      $font-size,
//      $line-height,
//      $border-width,
//      $padding-vertical,
//      $padding-horizontal,
//      $enlarge-by-ratio: false,
//      $reduce-by-ratio: false
//    ));
//  } @else {
//    // высоту нужно подсчитать
//    $result: map-merge($result, sf-control-calc-auto-height(
//      $font-size: $font-size,
//      $line-height: $line-height,
//      $border-width: $border-width,
//      $padding-vertical: $padding-vertical,
//      $padding-horizontal: $padding-horizontal,
//      $lines: $lines
//    ));
//  }
//
//  $result: map-merge($result, (
//    padding-top:    map-get($result, $padding-vertical) /2,
//    padding-bottom: map-get($result, $padding-vertical) /2,
//    padding-left:   map-get($result, $padding-horizontal) /2,
//    padding-right:  map-get($result, $padding-horizontal) /2
//  ));
//
//  @return $result;
//}


//@mixin sf-control-sizes(
//  $height,
//  $font-size,
//  $line-height,
//  $padding-vertical,
//  $padding-horizontal,
//  $border-width
//) {
//  font-size: $font-size;
//  line-height: $line-height;
//  padding: $padding-vertical $padding-horizontal;
//  border-width: $border-width;
//  //height: $height;
//  min-height: $height;
//}
//
