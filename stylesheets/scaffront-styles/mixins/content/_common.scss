//*********************************************
//    Framework/Mixins/Content/Common
//*********************************************

$base-font-size: 14px !default;
$base-gutter: $base-font-size !default;

@import 'sassy-maps';
@import 'sassdash';
@import 'sassy-validation';

@mixin e ($names...) {
  @if length($names) {
    @for $i from 1 through length($names) {
      @at-root &__#{nth($names, $i)} {
        @content;
      }
    }
  }
}

@mixin m ($names...) {
  @if length($names) {
    @for $i from 1 through length($names) {
      @at-root &--#{nth($names, $i)} {
        @content;
      }
    }
  }
}

@mixin sf-focus ($important: false) {
  $important: sf-important($important);

  // Default
  outline: thin dotted $important;
  // WebKit
  //outline: 5px auto -webkit-focus-ring-color $important;
  outline-offset: -2px $important;
}

@mixin sf-unfocus ($important: false) {
  $important: sf-important($important);

  outline: none $important;
  outline-offset: 0 $important;
}

@mixin sf-no-border ($important: false) {
  $important: sf-important($important);

  border: none $important;
  outline: none $important;
  text-decoration: none $important;
}

@mixin sf-selection (
  $color: #b3d4fc,
  $background: #363636,
  $selector: '&'
) {
  @if ($selector == false or $selector == null or $selector == '') {
    $selector: '';
  }
  $selector: unquote($selector);

  #{$selector}::-moz-selection {
    color: $color;
    background: $background;

    @content;
  }

  #{$selector}::selection {
    color: $color;
    background: $background;

    @content;
  }
}

@mixin sf-hr ($color, $height: 1px) {
  display: block;
  height: $height;
  border: 0;
  border-top: $height solid $color;
  padding: 0;
  margin: 0 0 1em;
}

@mixin sf-hidden ($important: false) {
  $important: sf-important($important);

  display: none $important;
}

@mixin sf-invisible ($important: false) {
  $important: sf-important($important);

  visibility: hidden $important;
}

@mixin sf-pull-left ($important: false) {
  $important: sf-important($important);

  float: left $important;
}

@mixin sf-pull-right ($important: false) {
  $important: sf-important($important);

  float: left $important;
}

@mixin sf-text-left ($important: false) {
  $important: sf-important($important);

  text-align: left $important;
}

@mixin sf-text-center ($important: false) {
  $important: sf-important($important);

  text-align: center $important;
}

@mixin sf-text-right ($important: false) {
  $important: sf-important($important);

  text-align: right $important;
}

@mixin sf-block ($important: false) {
  $important: sf-important($important);

  display: block $important;
}

@mixin sf-block-center () {
  display: block;
  margin-left   : auto;
  margin-right  : auto;
}

@mixin sf-content-image (
  $gutter: $base-gutter,
  $gutter-y-ratio: 2,
  $selector-left: '&[align=left], &.pull-left, .text-left &',
  $selector-center: '&[align=center], &[align=middle], &.center, .text-center &',
  $selector-right: '&[align=right], &.pull-right, .text-right &'
) {
  border: 0;
  max-width: 100%;
  height: auto;

  #{$selector-left} {
    margin-right: $base-gutter;
    margin-bottom: $base-gutter / $gutter-y-ratio;
  }
  #{$selector-right} {
    margin-left: $base-gutter;
    margin-bottom: $base-gutter / $gutter-y-ratio;
  }
  #{$selector-center} {
    @include sf-block-center;
    margin-bottom: $base-gutter / $gutter-y-ratio;
  }
}

@mixin sf-outline ($color: #fff, $inner-color: #000) {
  box-shadow: rgba($color, 0.5) 0 1px 0, inset rgba($inner-color, 0.75) 0 1px 0;
}

@mixin sf-acceleration {
  transform: translate3d(0, 0, 0);
}

/*
 * Hide only visually, but have it available for screen readers:
 * http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
 * Hide visually and from screen readers, but maintain layout.

 * Extends the to allow the element
 * to be focusable when navigated to via the keyboard:
 * https://www.drupal.org/node/897638
 */
@mixin sf-visually-hidden () {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;

  &.focusable:active,
  &.focusable:focus {
    clip: auto;
    height: auto;
    margin: 0;
    overflow: visible;
    position: static;
    width: auto;
  }
}

@mixin sf-visually-hidden-content () {
  background-color: transparent;
  border: 0;
  overflow: hidden;
  *text-indent: -9999px;

  &:before {
    content: "";
    display: block;
    width: 0;
    height: 100%;
  }
}

@mixin sf-hidden-text {
  font: 0/0 a;
  color: transparent;
  text-shadow: none;
}

/*
 * Clearfix: contain floats
 *
 * For modern browsers
 * 1. The space content is one way to avoid an Opera bug when the
 *    `contenteditable` attribute is included anywhere else in the document.
 *    Otherwise it causes space to appear at the top and bottom of elements
 *    that receive the `clearfix` class.
 * 2. The use of `table` rather than `block` is only necessary if using
 *    `:before` to contain the top-margins of child elements.
 */
@mixin sf-clearfix () {
  &:before,
  &:after {
    content: " "; /* 1 */
    display: table; /* 2 */
  }

  &:after {
    clear: both;
  }
}

/*
.qwe {
  @include sf-image-preload('qweqwe.jpg');
}

// after all styles
@include sf-image-preload;
*/
$_preload-image-list:     () !default;
$_preload-images-loaded:  false !default;
$_preload-image-urls:     () !default;
@mixin sf-image-preload ($preload: run) {
  @if not variable-exists(_preload-image-list) {
    $_preload-image-list: () !global;
  }
  @if not variable-exists(_preload-image-urls) {
    $_preload-image-urls: () !global;
  }
  @if not variable-exists(_preload-images-loaded) {
    $_preload-images-loaded: false !global;
  }
  @if $preload == run and not $_preload-images-loaded {
    $_preload-images-loaded: true !global;
    html:after {
      content: '';
      display: none;
      background-image: $_preload-image-urls;
    }
  } @else {
    $_preload-image-list: join($preload, $_preload-image-list) !global;
    $image-urls: ();
    @if length($_preload-image-list) > 0 {
      @for $i from 1 through length($_preload-image-list) {
        $image: nth($_preload-image-list, $i);
        $image-urls: join(url(#{$image}), $image-urls);
      }
    }
    $result: ();
    @each $item in $image-urls {
      @if not index($result, $item) {
        $result: append($result, $item, comma);
      }
    }
    $_preload-image-urls: $result !global;
  }
}

@mixin sf-component-set ($placeholder) {
  %#{$placeholder} {
    @content;
  }
}

@mixin sf-component-get ($placeholder) {
  @extend %#{$placeholder};
}

@mixin sf-styles ($styles, $values: (), $defaults: (), $exclude-values: ()) {
  @if (not is-map($styles)) {
    $styles: sf-assign-defaults($styles, $values, $defaults);
  }

  @if (not is-list($exclude-values)) { $exclude-values: ($exclude-values,); }

  @each $property, $value in $styles {
    @if (is-null(index($exclude-values, $value))) {
      #{$property}: $value;
    }
  }
}

@mixin sf-position ($positions) {
  $positions: sf-assign-defaults(top right bottom left, $positions, (auto auto auto auto));
  @include sf-styles(
    top right bottom left,
    $positions,
    $defaults: (top: auto, right: auto, bottom: auto, left: auto),
    $exclude-values: null auto
  );
}

@mixin sf-positions ($args...) { @include sf-position($args...); }

@mixin sf-x-margin ($margins) {
  $margins: sf-prefix-set($margins, margin-);
  @include sf-styles(
    margin-left margin-right,
    $margins,
    $defaults: (margin-left: auto, margin-right: auto),
    $exclude-values: null auto
  );
}

@mixin sf-x-margins ($args...) { @include sf-x-margin($args...); }

@mixin sf-y-margin ($margins) {
  $margins: sf-prefix-set($margins, margin-);
  @include sf-styles(
    margin-top margin-bottom,
    $margins,
    $defaults: (margin-top: auto, margin-bottom: auto),
    $exclude-values: null auto
  );
}

@mixin sf-y-margins ($args...) { @include sf-y-margin($args...); }

@mixin sf-margin ($margins) {
  $margins: sf-prefix-set($margins, margin-);
  @include sf-styles(
    margin-top margin-right margin-bottom margin-left,
    $margins,
    $defaults: (margin-top: auto, margin-right: auto, margin-bottom: auto, margin-left: auto),
    $exclude-values: null auto
  );
}

@mixin sf-margins ($args...) { @include sf-margin($args...); }

@mixin sf-x-padding ($paddings) {
  $paddings: sf-prefix-set($paddings, padding-);
  @include sf-styles(
    padding-left padding-right,
    $paddings,
    $defaults: (padding-left: auto, padding-right: auto),
    $exclude-values: null auto
  );
}

@mixin sf-x-paddings ($args...) { @include sf-x-padding($args...); }

@mixin sf-y-padding ($paddings) {
  $paddings: sf-prefix-set($paddings, padding-);
  @include sf-styles(
    padding-top padding-bottom,
    $paddings,
    $defaults: (padding-top: auto, padding-bottom: auto),
    $exclude-values: null auto
  );
}

@mixin sf-y-paddings ($args...) { @include sf-y-padding($args...); }

@mixin sf-padding ($paddings) {
  $paddings: sf-prefix-set($paddings, padding-);
  @include sf-styles(
    padding-top padding-right padding-bottom padding-left,
    $paddings,
    $defaults: (padding-top: auto, padding-right: auto, padding-bottom: auto, padding-left: auto),
    $exclude-values: null auto
  );
}

@mixin sf-paddings ($args...) { @include sf-padding($args...); }

@mixin sf-size ($size) {
  @include sf-styles(
    width height,
    $size,
    $defaults: (width: auto, height: auto),
    $exclude-values: null auto
  );
}

@mixin sf-sizes ($args...) { @include sf-size($args...); }
